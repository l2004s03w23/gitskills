import java.util.Scanner;

public class PasswordManager {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("请选择操作：");
        System.out.println("1. 加密");
        System.out.println("2. 解密");
        System.out.println("3. 判断强度");
        System.out.println("4. 生成密码");
        int choice = scanner.nextInt();

        switch (choice) {
            case 1:
                System.out.println("请输入要加密的字符串：");
                String plainText = scanner.next();
                String encryptedText = encrypt(plainText);
                System.out.println("加密后的字符串：" + encryptedText);
                break;
            case 2:
                System.out.println("请输入要解密的字符串：");
                String encryptedText2 = scanner.next();
                String decryptedText = decrypt(encryptedText2);
                System.out.println("解密后的字符串：" + decryptedText);
                break;
            case 3:
                System.out.println("请输入要判断强度的字符串：");
                String password = scanner.next();
                int strength = getPasswordStrength(password);
                System.out.println("密码强度：" + strength);
                break;
            case 4:
                System.out.println("生成的密码为：" + generatePassword());
                break;
            default:
                System.out.println("无效选择！");
        }
    }

    // 加密
    public static String encrypt(String plainText) {
        StringBuilder encryptedText = new StringBuilder();
        for (int i = 0; i < plainText.length(); i++) {
            char c = plainText.charAt(i);
            int ascii = ((int) c) + i + 1 + 3;
            encryptedText.append((char) ascii);
        }
        // 调换首尾字符顺序
        if (encryptedText.length() > 1) {
            char first = encryptedText.charAt(0);
            char last = encryptedText.charAt(encryptedText.length() - 1);
            encryptedText.setCharAt(0, last);
            encryptedText.setCharAt(encryptedText.length() - 1, first);
        }
        // 反转字符串
        return encryptedText.reverse().toString();
    }

    // 解密
    public static String decrypt(String encryptedText) {
        StringBuilder decryptedText = new StringBuilder(encryptedText).reverse();
        // 调换首尾字符顺序
        if (decryptedText.length() > 1) {
            char first = decryptedText.charAt(0);
            char last = decryptedText.charAt(decryptedText.length() - 1);
            decryptedText.setCharAt(0, last);
            decryptedText.setCharAt(decryptedText.length() - 1, first);
        }
        StringBuilder plainText = new StringBuilder();
        for (int i = 0; i < decryptedText.length(); i++) {
            char c = decryptedText.charAt(i);
            int ascii = ((int) c) - i - 1 - 3;
            plainText.append((char) ascii);
        }
        return plainText.toString();
    }

    // 判断密码强度
    public static int getPasswordStrength(String password) {
        int strength = 0;

        if (password.matches(".*[a-z]+.*")) {
            strength++;
        }
        if (password.matches(".*[A-Z]+.*")) {
            strength++;
        }
        if (password.matches(".*\\d+.*")) {
            strength++;
        }
        if (password.length() >= 8) {
            strength++;
        }

        return strength;
    }

    // 生成密码
    public static String generatePassword() {
        String characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder password = new StringBuilder();
        for (int i = 0; i < 16; i++) {
            int index = (int) (Math.random() * characters.length());
            password.append(characters.charAt(index));
        }
        return password.toString();
    }
}